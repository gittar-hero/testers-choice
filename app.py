# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JWtg1KeUmaRrgwN9NU9oPZKIYJkG3KmC
"""

import os
import cv2
import numpy as np
import io
import shutil
import streamlit as st
from ultralytics import YOLO
from pdf2image import convert_from_path
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.utils import ImageReader
from PIL import Image
import tempfile

# --- הגדרות גלובליות ---
# הגדרות צבע (טווח "גס")
LOWER_MARKER_COLOR = np.array([15, 30, 130])
UPPER_MARKER_COLOR = np.array([80, 255, 255])
TEXT_THRESHOLD = 190
MODEL_PATH = "best.pt" # המודל נמצא באותה תיקייה

# --- פונקציות הליבה (ללא שינוי מ-Colab) ---

# טעינת המודל (עם @st.cache_resource כדי לטעון פעם אחת)
@st.cache_resource
def load_yolo_model(model_path):
    if not os.path.exists(model_path):
        st.error(f"קובץ המודל לא נמצא בנתיב: {model_path}")
        return None
    try:
        model = YOLO(model_path)
        return model
    except Exception as e:
        st.error(f"שגיאה בטעינת מודל ה-YOLO: {e}")
        return None

def check_pdf_for_markers(images, model):
    """
    סורק את כל תמונות העמודים באמצעות המודל.
    מחזיר True אם נמצא לפחות זיהוי אחד, אחרת False.
    """
    progress_bar = st.progress(0, text="בודק את המסמך באמצעות המודל...")

    for i, img_pil in enumerate(images):
        img_cv = cv2.cvtColor(np.array(img_pil), cv2.COLOR_RGB2BGR)
        results = model(img_cv, verbose=False)

        if len(results[0].boxes) > 0:
            st.success(f"❗️ זוהה סימון בעמוד {i+1}. מכין את הקובץ לניקוי.")
            progress_bar.empty() # נקה את הפרוגרס בר
            return True

        progress_bar.progress((i + 1) / len(images), text=f"סורק עמוד {i+1}...")

    progress_bar.empty()
    return False

def process_pdf_color_clean(images):
    """
    מנקה את *כל* העמודים באמצעות סף צבע "גס".
    מחזיר את ה-PDF הנקי בתור bytes.
    """
    pdf_bytes_io = io.BytesIO()
    c = canvas.Canvas(pdf_bytes_io, pagesize=A4)
    width_a4, height_a4 = A4

    progress_bar = st.progress(0, text="מפעיל ניקוי צבע 'גס'...")

    for i, img_pil in enumerate(images):
        img_cv = cv2.cvtColor(np.array(img_pil), cv2.COLOR_RGB2BGR)
        output_img_cv = img_cv.copy()

        hsv_image = cv2.cvtColor(img_cv, cv2.COLOR_BGR2HSV)
        marker_mask = cv2.inRange(hsv_image, LOWER_MARKER_COLOR, UPPER_MARKER_COLOR)
        gray_image = cv2.cvtColor(img_cv, cv2.COLOR_BGR2GRAY)
        _, text_mask = cv2.threshold(gray_image, TEXT_THRESHOLD, 255, cv2.THRESH_BINARY_INV)
        background_only_mask = cv2.bitwise_not(text_mask)
        final_mask_to_clean = cv2.bitwise_and(marker_mask, background_only_mask)
        output_img_cv[final_mask_to_clean == 255] = [255, 255, 255]

        img_pil_cleaned = Image.fromarray(cv2.cvtColor(output_img_cv, cv2.COLOR_BGR2RGB))

        with io.BytesIO() as img_buffer:
            img_pil_cleaned.save(img_buffer, format='PNG')
            img_buffer.seek(0)
            c.drawImage(ImageReader(img_buffer), 0, 0, width=width_a4, height=height_a4, preserveAspectRatio=True)
            c.showPage()

        progress_bar.progress((i + 1) / len(images), text=f"מנקה עמוד {i+1}...")

    c.save()
    progress_bar.empty()
    return pdf_bytes_io.getvalue()

# --- 🚀 בניית ממשק המשתמש (החלק של Streamlit) ---

st.set_page_config(page_title="מנקה המרקרים", page_icon="🧹", layout="centered")

st.title("🧹 מנקה המרקרים")
st.write("הכלי מסיר סימוני מרקר צבעוניים מקבצי PDF, אך משאיר את הטקסט קריא.")

# 1. טעינת המודל
model = load_yolo_model(MODEL_PATH)

if model:
    # 2. כפתור העלאת קובץ
    uploaded_file = st.file_uploader("העלה קובץ PDF לניקוי:", type=["pdf"])

    if uploaded_file is not None:
        # שמור את הקובץ שהועלה זמנית כדי ש-pdf2image יוכל לקרוא אותו
        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_file:
            tmp_file.write(uploaded_file.getvalue())
            tmp_file_path = tmp_file.name

        try:
            with st.spinner("ממיר PDF לתמונות... (זה לוקח רגע)"):
                images = convert_from_path(tmp_file_path, dpi=200) # dpi נמוך יותר למהירות

            # 3. בדיקה מקדימה עם המודל
            is_marked = check_pdf_for_markers(images, model)

            # 4. החלטה וניקוי
            if is_marked:
                with st.spinner("הסימונים זוהו. מנקה את הקובץ..."):
                    cleaned_pdf_bytes = process_pdf_color_clean(images)

                st.success("✅ הקובץ נוקה בהצלחה!")

                # 5. כפתור הורדה
                st.download_button(
                    label="⬇️ הורד את הקובץ הנקי",
                    data=cleaned_pdf_bytes,
                    file_name=f"{uploaded_file.name.split('.')[0]}_cleaned.pdf",
                    mime="application/pdf"
                )
            else:
                st.warning("⚠️ המערכת לא תומכת בסוג הסימון בקובץ שהתקבל.")

        finally:
            # נקה את הקובץ הזמני
            if os.path.exists(tmp_file_path):
                os.remove(tmp_file_path)
else:
    st.error("האפליקציה בטעינה. המודל עדיין לא זמין.")